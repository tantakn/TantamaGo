"""ÊïôÂ∏´„ÅÇ„ÇäÂ≠¶Áøí„ÅÆ„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà„ÄÇ

npz „Çí‰Ωú„Çã„Å®„Åç
python3 train.py --size 13 --kifu-dir /home0/y2024/u2424004/igo/TantamaGo/SgfFile/13x13-record-2


Â≠¶Áøí„Åô„Çã„Å®„Åç
python3 train.py --size 13 --use-ddp true --npz-dir data --net DualNet_256_24

[20250226_170831] learn
epoch 0, data-0 : loss = 4.722960, time = 419.1 [s].
        policy loss : 4.715367
        value loss  : 0.759278
[20250226_171151] monitoring
cpu: 8.9% [5.5, 72.4, 1.1, 0.4, 1.1, 23.8, 0.5, 0.3, 0.7, 0.3, 0.6, 0.6] 
mem: 26.8% üî•
NVIDIA GeForce RTX 3060, 0, 98 %, 6635 MiB, 154.06 W üî•

[20250226_171533] learn
epoch 0, data-1 : loss = 3.384733, time = 420.3 [s].
        policy loss : 3.376641
        value loss  : 0.809221


„ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà„Åã„ÇâÂ≠¶Áøí„Åô„Çã„Å®„Åç
python3 train.py --size 13 --use-ddp true --npz-dir data --net DualNet_256_24 --checkpoint-dir model/checkpoint_20250227_033544_Ep:00.bin
"""
import glob
import os
import click
from learning_param import BATCH_SIZE, EPOCHS
from board.constant import BOARD_SIZE
from nn.learn import train_on_cpu, train_on_gpu, train_with_gumbel_alphazero_on_gpu, train_with_gumbel_alphazero_on_cpu,  train_on_gpu_ddp
from nn.data_generator import generate_supervised_learning_data, generate_reinforcement_learning_data, generate_supervised_learning_data_mt

import threading, time, datetime
from monitoring import display_train_monitoring_worker

import torch

from nn.utility import split_train_test_set

import resource




@click.command()
@click.option('--kifu-dir', type=click.STRING, \
    help="Â≠¶Áøí„Éá„Éº„Çø„ÅÆÊ£ãË≠ú„Éï„Ç°„Ç§„É´„ÇíÊ†ºÁ¥ç„Åó„Åü„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Éë„Çπ„ÄÇÊåáÂÆö„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„Éá„Éº„ÇøÁîüÊàê„ÇíÂÆüË°å„Åó„Å™„ÅÑ„ÄÇ")
@click.option('--size', type=click.IntRange(2, BOARD_SIZE), default=BOARD_SIZE, \
    help=f"Á¢ÅÁõ§„ÅÆÂ§ß„Åç„Åï„ÄÇÊúÄÂ∞è2, ÊúÄÂ§ß{BOARD_SIZE}")
@click.option('--use-gpu', type=click.BOOL, default=True, \
    help="Â≠¶ÁøíÊôÇ„Å´GPU„Çí‰ΩøÁî®„Åô„Çã„Éï„É©„Ç∞„ÄÇÊåáÂÆö„Åå„Å™„Åë„Çå„Å∞GPU„Çí‰ΩøÁî®„Åô„Çã„ÇÇ„ÅÆ„Å®„Åô„Çã„ÄÇ")
@click.option('--use-ddp', 'ddp', type=click.BOOL, default=False, \
    help="ddp„ÄÇ")#############
@click.option('--rl', type=click.BOOL, default=False, \
    help="Âº∑ÂåñÂ≠¶ÁøíÂÆüË°å„Éï„É©„Ç∞„ÄÇÊïôÂ∏´„ÅÇ„ÇäÂ≠¶Áøí„ÇíÂÆüË°å„Åô„Çã„Å®„Åç„Å´„ÅØfalse„ÇíÊåáÂÆö„Åô„Çã„ÄÇ")
@click.option('--window-size', type=click.INT, default=300000, \
    help="Âº∑ÂåñÂ≠¶ÁøíÊôÇ„ÅÆ„Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫")
@click.option('--net', 'network_name', type=click.STRING, default="DualNet", \
    help="„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÄÇ„Éá„Éï„Ç©„É´„Éà„ÅØ DualNet„ÄÇDualNet_256_24 „Å®„Åã„ÇíÊåáÂÆö„Åô„Çã„ÄÇ")
@click.option('--npz-dir', 'npz_dir', type=click.STRING, default="data", \
    help="npz„Åå„ÅÇ„Çã„Éï„Ç©„É´„ÉÄ„ÅÆ„Éë„Çπ„ÄÇ„Éá„Éï„Ç©„É´„Éà„ÅØ data„ÄÇ")
@click.option('--checkpoint-dir', 'checkpoint_dir', type=click.STRING, default=None, \
    help="checkpoint„Åå„ÅÇ„Çã„Éï„Ç©„É´„ÉÄ„ÅÆ„Éë„Çπ„ÄÇ„Éá„Éï„Ç©„É´„Éà„ÅØ None„ÄÇ")
@click.option('--rl-num', 'rl_num', type=click.INT, default=-1, \
    help="rl „ÅÆ„Éë„Ç§„Éó„É©„Ç§„É≥„Åå‰ΩïÂë®ÁõÆ„Åã„ÄÇ")
@click.option('--rl-datetime', 'rl_datetime', type=click.STRING, default="", \
    help="rl „ÅÆ„Éë„Ç§„Éó„É©„Ç§„É≥„ÅÆÈñãÂßãÊó•ÊôÇ„ÄÇ")
@click.option('--input-opt', 'input_opt', type=click.STRING, default="", \
    help="input_planes „ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÄÇ")
def train_main(kifu_dir: str, size: int, use_gpu: bool, rl: bool, window_size: int, network_name: str, npz_dir: str, checkpoint_dir: str, ddp: bool, rl_num: int, rl_datetime: str, input_opt: str): # pylint: disable=C0103
    """ÊïôÂ∏´„ÅÇ„ÇäÂ≠¶Áøí„ÄÅ„Åæ„Åü„ÅØÂº∑ÂåñÂ≠¶Áøí„ÅÆ„Éá„Éº„ÇøÁîüÊàê„Å®Â≠¶Áøí„ÇíÂÆüË°å„Åô„Çã„ÄÇ

    Args:
        kifu_dir (str): Â≠¶Áøí„Åô„ÇãÊ£ãË≠ú„Éï„Ç°„Ç§„É´„ÇíÊ†ºÁ¥ç„Åó„Åü„Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„Çπ„ÄÇ
        size (int): Á¢ÅÁõ§„ÅÆÂ§ß„Åç„Åï„ÄÇ
        use_gpu (bool): GPU‰ΩøÁî®„Éï„É©„Ç∞„ÄÇ
        rl (bool): Âº∑ÂåñÂ≠¶ÁøíÂÆüË°å„Éï„É©„Ç∞„ÄÇ
        window_size (int): Âº∑ÂåñÂ≠¶Áøí„Åß‰ΩøÁî®„Åô„Çã„Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫„ÄÇ
    """

    print(f"üêætrain_main")########
    print(f"    EPOCHS: {EPOCHS}")
    print(f"    BATCH_SIZE: {BATCH_SIZE}")
    print(f"    kifu_dir: {kifu_dir}")
    print(f"    size: {size}")
    print(f"    use_gpu: {use_gpu}")
    print(f"    rl: {rl}")
    print(f"    window_size: {window_size}")
    print(f"    network_name: {network_name}")
    print(f"    npz_dir: {npz_dir}")
    print(f"    checkpoint_dir: {checkpoint_dir}")
    print(f"    ddp: {ddp}")
    print(f"    rl_num: {rl_num}")
    print(f"    rl_datetime: {rl_datetime}")
    print(f"    input_opt: {input_opt}")

    # „Éè„Éº„Éâ„Ç¶„Çß„Ç¢‰ΩøÁî®Áéá„ÅÆÁõ£Ë¶ñ„Çπ„É¨„ÉÉ„Éâ„ÇíËµ∑Âãï
    monitoring_worker = threading.Thread(target=display_train_monitoring_worker, args=(use_gpu, True, 300, os.getpid()), daemon=True)
    monitoring_worker.start()


    # # „É°„É¢„É™‰ΩøÁî®Èáè„ÇíÂà∂ÈôêÔºàÂçò‰ΩçÔºö„Éê„Ç§„ÉàÔºâ
    # soft, hard = resource.getrlimit(resource.RLIMIT_AS)
    # resource.setrlimit(resource.RLIMIT_AS, (1024 * 1024 * 1024 * 8, hard))  # 1GB„Å´Âà∂Èôê


    program_dir = os.path.dirname(__file__)


    # Â≠¶Áøí„Éá„Éº„Çø„ÅÆÊåáÂÆö„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Éá„Éº„Çø„ÇíÁîüÊàê„Åô„Çã
    if kifu_dir is not None:
        if rl:
            # rl „ÅÆ kifu_dir „ÅØ kifu_dir/Êï∞Â≠ó/*.sgf
            kifu_index_list: list[int] = [int(os.path.split(dir_path)[-1]) for dir_path in glob.glob(os.path.join(kifu_dir, "*"))]
            """archive/Êï∞Â≠ó/„ÅÆÊï∞Â≠óÈÉ®ÂàÜ„ÇíÂèñÂæó„Åó„Å¶„É™„Çπ„Éà„Å´Ê†ºÁ¥ç„Åô„Çã„ÄÇ"""
            num_kifu = 0
            kifu_dir_list: list[str] = []
            """Ê£ãË≠ú„ÅÆ„Éë„Çπ„ÅÆ„É™„Çπ„Éà„ÄÇ"""
            for index in sorted(kifu_index_list, reverse=True):
                kifu_dir_path = os.path.join(kifu_dir, str(index))
                num_kifu += len(glob.glob(os.path.join(kifu_dir_path, "*.sgf")))
                kifu_dir_list.append(kifu_dir_path)
                if num_kifu >= window_size:
                    break

            generate_reinforcement_learning_data(program_dir=program_dir, kifu_dir_list=kifu_dir_list, board_size=size, input_opt=input_opt)
        else:
            # „Åì„Å£„Å°„ÅÆ kifu_dir „ÅØ kifu_dir/*.sgf
            generate_supervised_learning_data_mt(program_dir=program_dir, kifu_dir=kifu_dir, board_size=size, opt=input_opt)
            # generate_supervised_learning_data(program_dir=program_dir, kifu_dir=kifu_dir, board_size=size, opt=input_opt)
            # generate_supervised_learning_data(program_dir=program_dir, kifu_dir=kifu_dir, board_size=size)

    if npz_dir is not None:###############
        if rl:
            if use_gpu:
                train_with_gumbel_alphazero_on_gpu(program_dir=program_dir, board_size=size, batch_size=BATCH_SIZE, rl_num=rl_num, rl_datetime=rl_datetime, network_name=network_name)
            else:
                train_with_gumbel_alphazero_on_cpu(program_dir=program_dir, board_size=size, batch_size=BATCH_SIZE)
        else:
            if use_gpu and ddp:
                train_on_gpu_ddp(program_dir=program_dir,board_size=size,  batch_size=BATCH_SIZE, epochs=EPOCHS, network_name=network_name, npz_dir=npz_dir, chckpoint_dir=checkpoint_dir)
            elif use_gpu:
                train_on_gpu(program_dir=program_dir,board_size=size,  batch_size=BATCH_SIZE, epochs=EPOCHS, network_name=network_name, npz_dir=npz_dir)
            else:
                train_on_cpu(program_dir=program_dir,board_size=size, batch_size=BATCH_SIZE, epochs=EPOCHS)



if __name__ == "__main__":
    train_main() # pylint: disable=E1120
